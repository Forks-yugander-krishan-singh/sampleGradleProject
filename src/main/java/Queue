/**
 * This is an circular array based implementation of a bounded
 * Queue.
 *
 * @author Quinn Liu(quinnliu@vt.edu)
 */
class Queue {
    private static final int defaultSize = 10;
    private int maxSize;         // Maximum size of queue
    private int front;           // Index of front element
    private int rear;            // Index of rear element
    private Object queueArray[]; // Array holding queue elements

    // Constructors
    Queue(int size) {
        maxSize = size+1;          // One extra space is allocated
        rear = 0; front = 1;
        queueArray = new Object[maxSize];  // Create queueArray
    }
    Queue() { this(defaultSize); }

    // Reinitialize
    void clear() { rear = 0; front = 1; }

    // Put "it" in queue
    boolean enqueue(Object it) {
        if (((rear+2) % maxSize) == front) return false;  // Full
        rear = (rear+1) % maxSize; // Circular increment
        queueArray[rear] = it;
        return true;
    }

    // Remove and return front value
    Object dequeue() {
        if(length() == 0) return null;
        Object it = queueArray[front];
        front = (front+1) % maxSize; // Circular increment
        return it;
    }

    // Return front value
    Object frontValue() {
        if (length() == 0) return null;
        return queueArray[front];
    }

    // Return queue size
    int length() { return ((rear+maxSize) - front + 1) % maxSize; }
}